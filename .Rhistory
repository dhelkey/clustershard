#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
head
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
as.character
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
devtools::load_all(".")
#context("Load and Transform Data")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
#parsed_data = processPotteryDat(data1)
parsed_data2 = processPotteryDat(data2)
#parsed_data3 = processPotteryDat(data3)
# test_that("Error handling", {
#   expect_error( processPotteryDat(data_path,
#     element_start_column = 1))
#
#   expect_error( processPotteryDat(dat3))
# })
#
#
# test_that("Outputs expected data", {
#   expect_equal( example_data, parsed_data)
# })
#
#
data4 = paste0(data_path,'/data_test.csv')
parsed_data = processPotteryDat(data1)
parsed_data = processPotteryDat(data4)
parsed_data = processPotteryDat(data4,
element_start_column = 4)
parsed_data = processPotteryDat(data4,
element_start_column = 5)
devtools::load_all(".")
expect_error( processPotteryDat(dat3))
parsed_data = processPotteryDat(data4,
element_start_column = 5)
parsed_data = processPotteryDat(data1)
devtools::load_all(".")
processPotteryDat(data4s,
element_start_column = 5)
clusterTool()
devtools::load_all(".")
devtools::check()
?data
devtools::load_all(".")
packageDescription(ggplot2)
library(ggplot2)
packageDescription(ggplot2)
packageDescription("ggplot2")
devtools::load_all(".")
packageDescription("clustershard")
devtools::load_all(".")
citation('clustershard')
?person
devtools::check()
?data
devtools::check()
graphics::plot()
devtools::load_all(".")
graphics::plot()
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::check()
devtools::load_all(".")
clusterTool()
clusterTool()
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::check()
devtools::load_all(".")
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
data4 = paste0(data_path,'/data_test.csv')
parsed_data = processPotteryDat(data1)
context("Load Data")
test_that("Error handling", {
expect_error( processPotteryDat(data_path,
element_start_column = 1))
expect_error( processPotteryDat(dat3))
expect_error( processPotteryDat(data4))
expect_error( processPotteryDat(data4, #No error
element_start_column = 5),
NA)
})
test_that("Outputs expected data", {
expect_equal( example_data, parsed_data$dat)
})
context("Transform Data")
dat = parsed_data$dat
unscaled_dat = transformDat(dat)
scaled_dat = transformDat(dat, standardize = TRUE)
test_that("Standardize behaves as expected",{
expect_equal(prcomp(unscaled_dat, scale = TRUE)$x,
prcomp(scaled_dat)$x)
})
library(testthat)
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
data4 = paste0(data_path,'/data_test.csv')
parsed_data = processPotteryDat(data1)
context("Load Data")
test_that("Error handling", {
expect_error( processPotteryDat(data_path,
element_start_column = 1))
expect_error( processPotteryDat(dat3))
expect_error( processPotteryDat(data4))
expect_error( processPotteryDat(data4, #No error
element_start_column = 5),
NA)
})
test_that("Outputs expected data", {
expect_equal( example_data, parsed_data$dat)
})
context("Transform Data")
dat = parsed_data$dat
unscaled_dat = transformDat(dat)
scaled_dat = transformDat(dat, standardize = TRUE)
test_that("Standardize behaves as expected",{
expect_equal(prcomp(unscaled_dat, scale = TRUE)$x,
prcomp(scaled_dat)$x)
})
#Load in pre-parsed example data as a baseline
data(example_data)
#Parse from a raw csv
data_path = system.file("extdata", package = 'clustershard')
data1 = paste0(data_path,'/pottery_dat.csv')
data2 = paste0(data_path,'/data_messy.csv')
data3 = paste0(data_path,'/data_fail.csv')
data4 = paste0(data_path,'/data_test.csv')
parsed_data = processPotteryDat(data1)
context("Load Data")
test_that("Error handling", {
expect_error( processPotteryDat(data_path,
element_start_column = 1))
expect_error( processPotteryDat(dat3))
expect_error( processPotteryDat(data4))
expect_error( processPotteryDat(data4, #No error
element_start_column = 5),
NA)
})
test_that("Outputs expected data", {
expect_equal( example_data, parsed_data$dat)
})
context("Transform Data")
dat = parsed_data$dat
unscaled_dat = transformDat(dat)
scaled_dat = transformDat(dat)
test_that("Standardize behaves as expected",{
expect_equal(prcomp(unscaled_dat, scale = TRUE)$x,
prcomp(scaled_dat)$x)
})
head(unscaled_dat)
devtools::load_all(".")
context("Transform Data")
dat = parsed_data$dat
unscaled_dat = transformDat(dat)
scaled_dat = transformDat(dat, standardize = TRUE)
test_that("Standardize behaves as expected",{
expect_equal(prcomp(unscaled_dat, scale = TRUE)$x,
prcomp(scaled_dat)$x)
})
head(unscaled_dat)
transformDat()
transformDat
devtools::load_all(".")
dat = parsed_data$dat
unscaled_dat = transformDat(dat)
head(unscaled_dat)
?select
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
devtools::load_all(".")
clusterTool()
